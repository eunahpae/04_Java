package com.ohgiraffers.section02.demensinal;

public class Application1 {

  public static void main(String[] args) {

    /* comment. 다차원 배열의 구조를 이해하고 사용할 수 있다. */

    /* 다차원 배열이란?
     *  2차원 이상의 배열을 의미한다.
     *  배열의 각 요소가 다시 배열을 참조하는 구조를 가진 배열을 말한다.
     *  가장 흔히 사용하는 다차원 배열은 2차원 배열이며,
     *  2차원 배열은 1차원 배열 여러 개를 하나로 묶어서 관리하는 배열을 의미한다.
     *  이는 '배열의 배열'로 이해할 수 있다. 예를 들어 엑셀 표와 같은 형태.
     *
     *  2차원 배열의 구조는 다음과 같다:
     *    [0] → [0][0], [0][1], [0][2], ...
     *    [1] → [1][0], [1][1], [1][2], ...
     *    ...
     *
     *  사용 예시: 표 형태의 데이터, 행렬(Matrix), 게임 맵 좌표 등
     *
     *  + 더 많은 차원의 배열을 사용할 수 있지만 일반적으로 2차원 배열보다 더 높은 차원의 배열은 사용 빈도가 적다.
     */

    /* 2차원 배열을 사용하는 방법 */

    // 1. 배열의 주소를 보관할 레퍼런스 변수 선언 (stack 메모리에 생성됨)
    int[][] iarr1;   // 권장 방식
    int iarr2[][];   // 허용되는 방식
    int[] iarr3[];   // 허용되는 방식

    // 2. 여러 개의 1차원 배열의 주소를 관리할 배열 생성 (heap 메모리에 생성됨)
    // 단, 각 요소(행)에 실제 배열은 아직 할당되지 않음 (null 상태)
//        iarr1 = new int[][];
//        iarr1 = new int[][4];   // 주소를 묶어서 관리할 배열의 크기를 지정하지 않으면 에러 발생
    iarr1 = new int[3][];   // 3개의 행(1차원 배열의 주소를 저장할 공간) 생성

    // 3. 각 행에 해당하는 배열(열)을 개별적으로 할당
    // 이제 iarr1은 3행 5열의 2차원 배열로 구성된다.
    iarr1[0] = new int[5];  // 첫 번째 행에 5개의 열 할당
    iarr1[1] = new int[5];  // 두 번째 행에 5개의 열 할당
    iarr1[2] = new int[5];  // 세 번째 행에 5개의 열 할당

    /* 위 방식과 동일한 구조를 한 번에 생성할 수도 있다. (행, 열 크기를 모두 지정) */
    iarr2 = new int[3][5];  // 3행 5열의 2차원 배열을 한 번에 생성

    // 4. 생성한 2차원 배열의 각 행(row)을 반복문으로 순회하면서 출력
    // 첫 번째 행 출력
    for (int i = 0; i < iarr1[0].length; i++) {
      System.out.print(iarr1[0][i] + " ");  // 초기값: 0
    }
    System.out.println(); // 줄 바꿈

    // 두 번째 행 출력
    for (int i = 0; i < iarr1[1].length; i++) {
      System.out.print(iarr1[1][i] + " ");
    }
    System.out.println();

    // 세 번째 행 출력
    for (int i = 0; i < iarr1[2].length; i++) {
      System.out.print(iarr1[2][i] + " ");
    }
    System.out.println();

    /* 출력 결과는 모두 0으로 나타난다.
     * 이유: int형 배열의 기본 초기값이 0이기 때문
     */
  }
}
