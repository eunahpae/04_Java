package com.ohgiraffers.section03.abstraction;

import java.util.Scanner;

public class Application {

  public static void main(String[] args) {

    /* comment. 객체지향 프로그래밍에 대해 이해하고 객체와 클래스를 설계하여 프로그래밍 할 수 있다. */

    /* [1] 객체지향 프로그래밍(OOP) 개념 복습
     * - 객체지향 프로그래밍은 현실 세계의 사물(객체)을 프로그램으로 모델링하여 구현하는 방식이다.
     * - 이때 현실 세계는 너무 복잡하므로, 프로그램 목적에 맞게 단순화하는 "추상화" 개념이 필요하다.
     */

    /* [2] 추상화란?
     * - 불필요한 정보는 제거하고 공통적이고 핵심적인 특징만 추출하는 작업.
     * - 추상화를 통해 재사용성과 유지보수성이 높은 프로그램을 설계할 수 있다.
     */

    /* [3] 프로그램 개요 : 카레이싱 시뮬레이션 프로그램
     * - 카레이서가 자동차를 운전하는 상황을 객체지향적으로 모델링한다.
     *
     * [4] 요구사항(시스템 기능)
     * 1. 카레이서는 시동 걸기, 엑셀레이터 밟기, 브레이크 밟기, 시동 끄기를 할 수 있다.
     * 2. 자동차는 시동 걸기, 전진, 멈춤, 시동 끄기를 할 수 있다.
     * 3. 자동차는 처음에 멈춘 상태로 대기한다.
     * 4. 이미 시동이 걸린 경우 중복으로 시동을 걸 수 없다.
     * 5. 카레이서가 엑셀레이터를 밟으면 시동이 걸린 상태인 경우 자동차는 시속 10km/h씩 증가하며 전진한다.
     * 6. 주행 중일 때만 브레이크로 시속이 0으로 떨어지게 하여 자동차를 멈출 수 있다.
     * 7. 정지 상태에서 브레이크를 밟으면 "이미 멈춰있는 상태"라는 안내 메시지를 출력한다.
     * 8. 카레이서가 시동을 끄면 더 이상 자동차는 움직이지 않는다.
     * 9. 주행 중에는 시동을 끌 수 없다.
     * 10. 프로그램은 사용자의 선택에 따라 반복 실행되고 종료될 수 있다.
     */

    /* [5] 프로그램 설계하기
     *  1. 필요한 객체 도출
     *  - 플레이어(사용자), 카레이서, 자동차
     *
     *  2. 객체간 상호작용
     *  - 카레이서가 수신할 수 있는 메세지 (카레이서가 해야하는 일)
     *  1. 시동을 걸어라
     *  2. 엑셀레이터를 밟아라
     *  3. 브레이크를 밟아라
     *  4. 시동을 꺼라
     *
     *  - 자동차가 수신할 수 있는 메시지 (자동차가 해야 하는 일)
     *  1. 시동을 걸어라
     *  2. 앞으로 가라
     *  3. 멈춰라
     *  4. 시동을 꺼라
     * */

    // CarRacer 객체 생성: 자동차 조작을 담당
    CarRacer racer = new CarRacer();

    Scanner sc = new Scanner(System.in);

    // 사용자 입력을 반복적으로 처리하는 루프
    while (true) {
      System.out.println("\n================ 카레이싱 프로그램 ===================");
      System.out.println("1. 시동 걸기");
      System.out.println("2. 전진");
      System.out.println("3. 정지");
      System.out.println("4. 시동 끄기");
      System.out.println("9. 프로그램 종료");
      System.out.print("메뉴 선택 : ");
      int no = sc.nextInt();

      // 사용자 입력 번호에 따라 기능 수행
      switch (no) {
        case 1:
          racer.startUp();          // 시동 켜기
          break;
        case 2:
          racer.stepAccelator();    // 엑셀레이터 밟기 (전진)
          break;
        case 3:
          racer.stepBreak();        // 브레이크 밟기 (정지)
          break;
        case 4:
          racer.turnOff();          // 시동 끄기
          break;
        case 9:
          System.out.println("프로그램을 종료합니다.");
          break;
        default:
          System.out.println("잘못된 번호를 선택하셨습니다. 다시 입력해주세요.");
          break;
      }

      // 종료 조건 확인
      if (no == 9) {
        break;
      }
    }

    sc.close(); // 자원 정리
  }
}